(translationUnit (declarationseq (declaration (blockDeclaration (usingDirective using namespace (namespaceName (originalNamespaceName std)) ;))) (declaration (blockDeclaration (simpleDeclaration (declSpecifierSeq (declSpecifier (typeSpecifier (enumSpecifier (enumHead (enumkey enum) HttpResponse (enumbase : (typeSpecifierSeq (typeSpecifier (trailingTypeSpecifier (simpleTypeSpecifier int)))))) { (enumeratorList (enumeratorDefinition (enumerator Okay) = (constantExpression (conditionalExpression (logicalOrExpression (logicalAndExpression (inclusiveOrExpression (exclusiveOrExpression (andExpression (equalityExpression (relationalExpression (shiftExpression (additiveExpression (multiplicativeExpression (pointerMemberExpression (castExpression (unaryExpression (postfixExpression (primaryExpression (literal 200))))))))))))))))))) , (enumeratorDefinition (enumerator NotFound) = (constantExpression (conditionalExpression (logicalOrExpression (logicalAndExpression (inclusiveOrExpression (exclusiveOrExpression (andExpression (equalityExpression (relationalExpression (shiftExpression (additiveExpression (multiplicativeExpression (pointerMemberExpression (castExpression (unaryExpression (postfixExpression (primaryExpression (literal 404))))))))))))))))))) , (enumeratorDefinition (enumerator InternalError) = (constantExpression (conditionalExpression (logicalOrExpression (logicalAndExpression (inclusiveOrExpression (exclusiveOrExpression (andExpression (equalityExpression (relationalExpression (shiftExpression (additiveExpression (multiplicativeExpression (pointerMemberExpression (castExpression (unaryExpression (postfixExpression (primaryExpression (literal 500)))))))))))))))))))) , })))) ;))) (declaration (functionDefinition (declSpecifierSeq (declSpecifier (typeSpecifier (trailingTypeSpecifier (simpleTypeSpecifier int))))) (declarator (pointerDeclarator (noPointerDeclarator (noPointerDeclarator (declaratorid (idExpression (unqualifiedId main)))) (parametersAndQualifiers ( ))))) (functionBody (compoundStatement { }))))) <EOF>)