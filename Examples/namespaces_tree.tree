(translationUnit (declarationseq (declaration (blockDeclaration (usingDirective using namespace (namespaceName (originalNamespaceName std)) ;))) (declaration (namespaceDefinition namespace myapp { (declarationseq (declaration (namespaceDefinition namespace xd { (declarationseq (declaration (namespaceDefinition namespace tl { })) (declaration (functionDefinition (declSpecifierSeq (declSpecifier (typeSpecifier (trailingTypeSpecifier (simpleTypeSpecifier void))))) (declarator (pointerDeclarator (noPointerDeclarator (noPointerDeclarator (declaratorid (idExpression (unqualifiedId tr)))) (parametersAndQualifiers ( ))))) (functionBody (compoundStatement { (statementSeq (statement (expressionStatement (expression (assignmentExpression (conditionalExpression (logicalOrExpression (logicalAndExpression (inclusiveOrExpression (exclusiveOrExpression (andExpression (equalityExpression (relationalExpression (shiftExpression (additiveExpression (multiplicativeExpression (pointerMemberExpression (castExpression (unaryExpression (postfixExpression (primaryExpression (idExpression (unqualifiedId cout))))))))) (shiftOperator < <) (additiveExpression (multiplicativeExpression (pointerMemberExpression (castExpression (unaryExpression (postfixExpression (primaryExpression (literal "Inside"))))))))))))))))))) ;))) }))))) })) (declaration (functionDefinition (declSpecifierSeq (declSpecifier (typeSpecifier (trailingTypeSpecifier (simpleTypeSpecifier void))))) (declarator (pointerDeclarator (noPointerDeclarator (noPointerDeclarator (declaratorid (idExpression (unqualifiedId pr)))) (parametersAndQualifiers ( ))))) (functionBody (compoundStatement { (statementSeq (statement (expressionStatement (expression (assignmentExpression (conditionalExpression (logicalOrExpression (logicalAndExpression (inclusiveOrExpression (exclusiveOrExpression (andExpression (equalityExpression (relationalExpression (shiftExpression (additiveExpression (multiplicativeExpression (pointerMemberExpression (castExpression (unaryExpression (postfixExpression (primaryExpression (idExpression (unqualifiedId cout))))))))) (shiftOperator < <) (additiveExpression (multiplicativeExpression (pointerMemberExpression (castExpression (unaryExpression (postfixExpression (primaryExpression (literal "Hello"))))))))))))))))))) ;))) }))))) })) (declaration (functionDefinition (declSpecifierSeq (declSpecifier (typeSpecifier (trailingTypeSpecifier (simpleTypeSpecifier int))))) (declarator (pointerDeclarator (noPointerDeclarator (noPointerDeclarator (declaratorid (idExpression (unqualifiedId main)))) (parametersAndQualifiers ( ))))) (functionBody (compoundStatement { (statementSeq (statement (declarationStatement (blockDeclaration (simpleDeclaration (declSpecifierSeq (declSpecifier (typeSpecifier (trailingTypeSpecifier (simpleTypeSpecifier (theTypeName (className myapp))))))) (initDeclaratorList (initDeclarator (declarator (pointerDeclarator (noPointerDeclarator (noPointerDeclarator (declaratorid (idExpression (qualifiedId (nestedNameSpecifier ::) (unqualifiedId pr))))) (parametersAndQualifiers ( ))))))) ;)))) (statement (declarationStatement (blockDeclaration (usingDirective using namespace (nestedNameSpecifier (theTypeName (className myapp)) ::) (namespaceName (originalNamespaceName xd)) ;)))) (statement (declarationStatement (blockDeclaration (simpleDeclaration (declSpecifierSeq (declSpecifier (typeSpecifier (trailingTypeSpecifier (simpleTypeSpecifier (nestedNameSpecifier (theTypeName (className myapp)) ::) (theTypeName (className xd))))))) (initDeclaratorList (initDeclarator (declarator (pointerDeclarator (noPointerDeclarator (noPointerDeclarator (declaratorid (idExpression (qualifiedId (nestedNameSpecifier ::) (unqualifiedId tr))))) (parametersAndQualifiers ( ))))))) ;))))) }))))) <EOF>)